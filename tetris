#!/usr/bin/env python3

import copy
import random
import sys
import time
import curses
import signal

from datetime import datetime, timedelta
from typing import Tuple
from enum import Enum

standard_screen = curses.initscr()

WIDTH = 10
HEIGHT = 20
SCREEN = [[0 for _ in range(WIDTH)] for _ in range(HEIGHT)]
INITIAL_COORDS = (WIDTH // 2 - 2, 0)

SOLID = '█'
SEMISOLID = '▒'
PAUSED = False


class COLORS(Enum):
    CYAN = 2
    YELLOW = 3
    MAGENTA = 4
    BLUE = 5
    GREEN = 6
    RED = 7


SHAPE_I = [
    [0, 0, 0, 0],
    [1, 1, 1, 1],
    [0, 0, 0, 0],
]

SHAPE_T = [
    [1, 1, 1],
    [0, 1, 0],
]

SHAPE_Z = [
    [1, 1, 0],
    [0, 1, 1],
]

SHAPE_S = [
    [0, 1, 1],
    [1, 1, 0],
]

SHAPE_O = [
    [1, 1],
    [1, 1],
]

SHAPE_J = [
    [1, 1, 1],
    [0, 0, 1],
]

SHAPE_L = [
    [1, 1, 1],
    [1, 0, 0],
]


def get_colorized_shape(shape, color: COLORS):
    colorized_shape = copy.deepcopy(shape)
    for y, row in enumerate(colorized_shape):
        for x, cell in enumerate(colorized_shape[y]):
            if cell == 1:
                colorized_shape[y][x] = color.value
    return colorized_shape


SHAPES = [
    get_colorized_shape(SHAPE_I, COLORS.RED),
    get_colorized_shape(SHAPE_T, COLORS.GREEN),
    get_colorized_shape(SHAPE_Z, COLORS.YELLOW),
    get_colorized_shape(SHAPE_S, COLORS.CYAN),
    get_colorized_shape(SHAPE_O, COLORS.BLUE),
    get_colorized_shape(SHAPE_J, COLORS.YELLOW),
    get_colorized_shape(SHAPE_L, COLORS.MAGENTA)
]

MAX_SHAPE_H = max([len(shape[0]) for shape in SHAPES])
MAX_SHAPE_V = max([len(shape) for shape in SHAPES])

SCREEN_ROWS, SCREEN_COLS = 0, 0
LINES = 0
FALL_EVERY_TIME = timedelta(microseconds=500000)


def rotate_shape(shape):
    return list(map(list, zip(*shape)))[::-1]


def get_new_shape():
    new_shape = copy.deepcopy(SHAPES[random.randint(0, len(SHAPES) - 1)])
    return new_shape


def get_bottom_coords_for_collision(shape):
    x_detected = []
    for y in range(len(shape) - 1, -1, -1):
        for x in range(len(shape[y])):
            if x in x_detected:
                continue
            if shape[y][x] > 0:
                x_detected.append(x)
                yield x, y


def get_left_coords_for_collision(shape):
    for y, cols in enumerate(shape):
        y_found = False
        for x, cell in enumerate(shape[y]):
            if y_found:
                break
            if cell > 0:
                y_found = True
                yield x, y


def get_right_coords_for_collision(shape):
    for y, cols in enumerate(shape):
        y_found = False
        for x in range(len(shape[y]) - 1, -1, -1):
            if y_found:
                break
            cell = shape[y][x]
            if cell > 0:
                y_found = True
                yield x, y


def remove_filled_rows(screen):
    global LINES
    removed_lines = 0
    new_screen = []
    for y, row in enumerate(screen):
        if all([col for col in row]):
            removed_lines += 1
            new_screen = [[0] * len(screen[0])] + new_screen
        else:
            new_screen.append(row)
    LINES += removed_lines
    return new_screen, removed_lines


class Keyboard:
    def __init__(self):
        global standard_screen
        self._screen = standard_screen
        self._key = None

    def refresh(self):
        try:
            self._key = self._screen.getch()
        except curses.error:
            self._key = None

    def clear(self):
        while True:
            key = self._screen.getch()
            if key == -1:
                break

    def is_pause_pressed(self) -> bool:
        return self._key in [ord('p'), ord('P')]

    def is_left_pressed(self) -> bool:
        return self._key == curses.KEY_LEFT

    def is_right_pressed(self) -> bool:
        return self._key == curses.KEY_RIGHT

    def is_down_pressed(self) -> bool:
        return self._key == curses.KEY_DOWN

    def is_up_pressed(self) -> bool:
        return self._key == curses.KEY_UP

    def is_esc_pressed(self) -> bool:
        if self._key == 27:
            if self._screen.getch() == -1:
                return True
        return False


def copy_shape_to_screen(shape, shape_x, shape_y, screen):
    for y in range(len(shape)):
        for x in range(len(shape[y])):
            if shape[y][x] > 0:
                screen[y + shape_y][x + shape_x] = shape[y][x]


def can_shape_continue_to_fall_in_screen(screen, shape, shape_x, shape_y) -> bool:
    for bottom_x, bottom_y in get_bottom_coords_for_collision(shape):
        if shape_y + bottom_y == len(screen) - 1 or screen[shape_y + bottom_y + 1][shape_x + bottom_x] > 0:
            return False
    return True


def get_color(color: int):
    try:
        return [curses.color_pair(color)]
    except curses.error:
        return []


def draw_virtual_screen(virtual_screen, shape, shape_x, shape_y, next_shape):
    global SCREEN_ROWS
    global SCREEN_COLS

    rows, cols = standard_screen.getmaxyx()

    if rows != SCREEN_ROWS or cols != SCREEN_COLS:
        standard_screen.clear()

    SCREEN_ROWS = rows
    SCREEN_COLS = cols

    width = len(virtual_screen[0]) * 2
    margin_left = (cols // 2) - (width // 2)
    margin_top = 3

    completed_rows = []
    for y, row in enumerate(virtual_screen):
        if all([cell > 0 for cell in virtual_screen[y]]):
            completed_rows.append(y)

    try:
        if PAUSED:
            standard_screen.addstr(0, margin_left + (width // 2) - 3, 'PAUSED')
        else:
            standard_screen.addstr(0, margin_left + (width // 2) - 3, '      ')

        # screen
        last_y = None
        for y, row in enumerate(virtual_screen):
            last_y = y
            standard_screen.addch(y + margin_top, -1 + margin_left, '┃')
            standard_screen.addch(y + margin_top, margin_left + width, '┃')
            for x, cell in enumerate(virtual_screen[y]):
                standard_screen.addstr(
                    y + margin_top,
                    x * 2 + margin_left,
                    SOLID * 2 if cell > 0 else '  ',
                    *get_color(cell)
                )

        standard_screen.addstr(last_y + margin_top + 1, margin_left - 1, '┗' + ('━' * width) + '┛')

        # current shape
        for y, row in enumerate(shape):
            for x, cell in enumerate(shape[y]):
                if cell > 0:
                    standard_screen.addstr(
                        margin_top + y + shape_y,
                        margin_left + (x + shape_x) * 2,
                        SOLID * 2,
                        *get_color(cell)
                    )

        standard_screen.addstr(margin_top, margin_left - 13, f' LINES {LINES}')

        standard_screen.addstr(margin_top, width + margin_left + 5, 'NEXT')
        for y in range(MAX_SHAPE_V):
            for x in range(MAX_SHAPE_H * 2):
                try:
                    cell = next_shape[y][x // 2]
                    standard_screen.addch(
                        y + margin_top + 2,
                        width + margin_left + 5 + x,
                        SOLID if cell > 0 else ' ',
                        *get_color(cell)
                    )
                except IndexError:
                    standard_screen.addch(y + margin_top + 2, width + margin_left + 5 + x, ' ')

        # completed rows animation
        if len(completed_rows) > 0:
            for color in COLORS:
                for completed_y in completed_rows:
                    standard_screen.addstr(
                        completed_y + margin_top,
                        0 + margin_left,
                        SEMISOLID * width,
                        *get_color(color.value)
                    )
                standard_screen.refresh()
                time.sleep(0.03)
    except curses.error:
        standard_screen.addstr(0, 0, 'There is not enough space to draw')


def can_shape_move_left_in_screen(screen, shape, shape_x, shape_y) -> bool:
    for x, y in get_left_coords_for_collision(shape):
        if shape_x + x == 0:
            return False
        if screen[shape_y + y][shape_x + x - 1] > 0:
            return False
    return True


def can_shape_move_right_in_screen(screen, shape, shape_x, shape_y) -> bool:
    max_x = len(screen[0]) - 1
    for x, y in get_right_coords_for_collision(shape):
        if shape_x + x == max_x:
            return False
        elif screen[shape_y + y][shape_x + x + 1] > 0:
            return False
    return True


def rotate_shape_in_screen(screen, shape, shape_x, shape_y) -> Tuple:
    max_x = len(screen[0]) - 1
    rotated_shape = rotate_shape(shape)
    rotated_shape_x, rotated_shape_y = shape_x, shape_y
    for x, y in get_left_coords_for_collision(rotated_shape):
        while rotated_shape_x + x < 0:
            rotated_shape_x += 1
    for x, y in get_right_coords_for_collision(rotated_shape):
        while rotated_shape_x + x > max_x:
            rotated_shape_x -= 1
    for y, row in enumerate(rotated_shape):
        if rotated_shape_y + y > HEIGHT:
            break
        for x, cell in enumerate(rotated_shape[y]):
            try:
                if screen[rotated_shape_y + y][rotated_shape_x + x] > 0:
                    break
            except IndexError:
                break
        else:
            continue
        break
    else:
        shape = rotated_shape
        shape_x = rotated_shape_x
    return shape, shape_x, shape_y


def main(screen):
    global FALL_EVERY_TIME
    global PAUSED

    keyboard = Keyboard()
    shape = get_new_shape()
    next_shape = get_new_shape()
    last_fall_movement = datetime.now()
    shape_x, shape_y = INITIAL_COORDS

    while True:
        keyboard.refresh()

        if keyboard.is_esc_pressed():
            restore_terminal_config()
            show_lines()
            sys.exit(0)

        if keyboard.is_pause_pressed():
            PAUSED = not PAUSED

        floor_reached = False
        if not PAUSED:
            if keyboard.is_up_pressed():
                shape, shape_x, shape_y = rotate_shape_in_screen(screen, shape, shape_x, shape_y)

            if keyboard.is_left_pressed() and can_shape_move_left_in_screen(screen, shape, shape_x, shape_y):
                shape_x -= 1

            elif keyboard.is_right_pressed() and can_shape_move_right_in_screen(screen, shape, shape_x, shape_y):
                shape_x += 1

            if keyboard.is_down_pressed() or datetime.now() - last_fall_movement > FALL_EVERY_TIME:
                last_fall_movement = datetime.now()
                if can_shape_continue_to_fall_in_screen(screen, shape, shape_x, shape_y):
                    shape_y += 1
                else:
                    if shape_y == 0:
                        restore_terminal_config()
                        show_lines()
                        sys.exit(0)

                    floor_reached = True
                    copy_shape_to_screen(shape, shape_x, shape_y, screen)
                    shape = next_shape
                    next_shape = get_new_shape()
                    shape_x, shape_y = INITIAL_COORDS

        virtual_screen = copy.deepcopy(screen)
        draw_virtual_screen(virtual_screen, shape, shape_x, shape_y, next_shape)

        removed_lines = 0
        if floor_reached:
            screen, removed_lines = remove_filled_rows(screen)

        if removed_lines > 0:
            if FALL_EVERY_TIME >= timedelta(microseconds=60000):
                FALL_EVERY_TIME = timedelta(microseconds=FALL_EVERY_TIME.microseconds * 0.95)
            keyboard.clear()

        elif floor_reached:
            time.sleep(0.05)
            keyboard.clear()

        time.sleep(0.01)


def show_lines():
    print(f'Lines {LINES}')


def setup_curses():
    global SCREEN_ROWS
    global SCREEN_COLS
    curses.noecho()
    curses.cbreak()
    standard_screen.keypad(True)
    standard_screen.nodelay(True)
    curses.curs_set(0)

    SCREEN_ROWS, SCREEN_COLS = standard_screen.getmaxyx()

    if curses.has_colors():
        curses.start_color()
        curses.init_pair(COLORS.CYAN.value, curses.COLOR_CYAN, curses.COLOR_BLACK)
        curses.init_pair(COLORS.YELLOW.value, curses.COLOR_YELLOW, curses.COLOR_BLACK)
        curses.init_pair(COLORS.MAGENTA.value, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
        curses.init_pair(COLORS.BLUE.value, curses.COLOR_BLUE, curses.COLOR_BLACK)
        curses.init_pair(COLORS.GREEN.value, curses.COLOR_GREEN, curses.COLOR_BLACK)
        curses.init_pair(COLORS.RED.value, curses.COLOR_RED, curses.COLOR_BLACK)


def restore_terminal_config():
    curses.nocbreak()
    standard_screen.keypad(False)
    curses.echo()
    curses.curs_set(1)
    curses.endwin()


def interrupt_handler(sig, frame):
    restore_terminal_config()
    show_lines()
    sys.exit(0)


if __name__ == '__main__':
    setup_curses()
    signal.signal(signal.SIGINT, interrupt_handler)

    try:
        main(SCREEN)

    except Exception as e:
        restore_terminal_config()
        show_lines()
        raise e
